// src/virtual/background-entrypoint.ts
import definition from "virtual:user-background-entrypoint";

// src/sandbox/utils/logger.ts
function print(method, ...args) {
  if (import.meta.env.MODE === "production")
    return;
  if (typeof args[0] === "string") {
    const message = args.shift();
    method(`[wxt] ${message}`, ...args);
  } else {
    method("[wxt]", ...args);
  }
}
var logger = {
  debug: (...args) => print(console.debug, ...args),
  log: (...args) => print(console.log, ...args),
  warn: (...args) => print(console.warn, ...args),
  error: (...args) => print(console.error, ...args)
};

// src/virtual/utils/setup-web-socket.ts
function setupWebSocket(onMessage) {
  const serverUrl = `${__DEV_SERVER_PROTOCOL__}//${__DEV_SERVER_HOSTNAME__}:${__DEV_SERVER_PORT__}`;
  logger.debug("Connecting to dev server @", serverUrl);
  const ws = new WebSocket(serverUrl, "vite-hmr");
  ws.addEventListener("open", () => {
    logger.debug("Connected to dev server");
  });
  ws.addEventListener("close", () => {
    logger.debug("Disconnected from dev server");
  });
  ws.addEventListener("error", (event) => {
    logger.error("Failed to connect to dev server", event);
  });
  ws.addEventListener("message", (e) => {
    try {
      const message = JSON.parse(e.data);
      if (message.type === "custom" && message.event?.startsWith?.("wxt:")) {
        onMessage?.(message);
      }
    } catch (err) {
      logger.error("Failed to handle message", err);
    }
  });
  return ws;
}

// src/virtual/background-entrypoint.ts
import { browser as browser3 } from "wxt/browser";

// src/virtual/utils/keep-service-worker-alive.ts
import { browser } from "wxt/browser";
function keepServiceWorkerAlive() {
  setInterval(async () => {
    await browser.runtime.getPlatformInfo();
  }, 5e3);
}

// src/virtual/utils/reload-content-scripts.ts
import { browser as browser2 } from "wxt/browser";
import { MatchPattern } from "wxt/sandbox";
function reloadContentScript(payload) {
  const manifest = browser2.runtime.getManifest();
  if (manifest.manifest_version == 2) {
    void reloadContentScriptMv2(payload);
  } else {
    void reloadContentScriptMv3(payload);
  }
}
async function reloadContentScriptMv3({
  registration,
  contentScript
}) {
  if (registration === "runtime") {
    await reloadRuntimeContentScriptMv3(contentScript);
  } else {
    await reloadManifestContentScriptMv3(contentScript);
  }
}
async function reloadManifestContentScriptMv3(contentScript) {
  const id = `wxt:${contentScript.js[0]}`;
  logger.log("Reloading content script:", contentScript);
  const registered = await browser2.scripting.getRegisteredContentScripts();
  logger.debug("Existing scripts:", registered);
  const existing = registered.find((cs) => cs.id === id);
  if (existing) {
    logger.debug("Updating content script", existing);
    await browser2.scripting.updateContentScripts([{ ...contentScript, id }]);
  } else {
    logger.debug("Registering new content script...");
    await browser2.scripting.registerContentScripts([{ ...contentScript, id }]);
  }
  await reloadTabsForContentScript(contentScript);
}
async function reloadRuntimeContentScriptMv3(contentScript) {
  logger.log("Reloading content script:", contentScript);
  const registered = await browser2.scripting.getRegisteredContentScripts();
  logger.debug("Existing scripts:", registered);
  const matches = registered.filter((cs) => {
    const hasJs = contentScript.js?.find((js) => cs.js?.includes(js));
    const hasCss = contentScript.css?.find((css) => cs.css?.includes(css));
    return hasJs || hasCss;
  });
  if (matches.length === 0) {
    logger.log(
      "Content script is not registered yet, nothing to reload",
      contentScript
    );
    return;
  }
  await browser2.scripting.updateContentScripts(matches);
  await reloadTabsForContentScript(contentScript);
}
async function reloadTabsForContentScript(contentScript) {
  const allTabs = await browser2.tabs.query({});
  const matchPatterns = contentScript.matches.map(
    (match) => new MatchPattern(match)
  );
  const matchingTabs = allTabs.filter((tab) => {
    const url = tab.url;
    if (!url)
      return false;
    return !!matchPatterns.find((pattern) => pattern.includes(url));
  });
  await Promise.all(matchingTabs.map((tab) => browser2.tabs.reload(tab.id)));
}
async function reloadContentScriptMv2(_payload) {
  throw Error("TODO: reloadContentScriptMv2");
}

// src/virtual/background-entrypoint.ts
if (import.meta.env.COMMAND === "serve") {
  try {
    const ws = setupWebSocket((message) => {
      if (message.event === "wxt:reload-extension")
        browser3.runtime.reload();
      if (message.event === "wxt:reload-content-script" && message.data != null)
        reloadContentScript(message.data);
    });
    if (import.meta.env.MANIFEST_VERSION === 3) {
      ws.addEventListener("open", () => {
        const msg = { type: "custom", event: "wxt:background-initialized" };
        ws.send(JSON.stringify(msg));
      });
      keepServiceWorkerAlive();
    }
  } catch (err) {
    logger.error("Failed to setup web socket connection with dev server", err);
  }
  browser3.commands.onCommand.addListener((command) => {
    if (command === "wxt:reload-extension") {
      browser3.runtime.reload();
    }
  });
}
var result;
try {
  result = definition.main();
  if (result instanceof Promise) {
    console.warn(
      "The background's main() function return a promise, but it must be synchronous"
    );
  }
} catch (err) {
  logger.error("The background crashed on startup!");
  throw err;
}
var background_entrypoint_default = result;
export {
  background_entrypoint_default as default
};
